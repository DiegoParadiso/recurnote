// Geometry utility functions

export function isColliding(x1, y1, w1, h1, x2, y2, w2, h2, margin = 8) {
  return !(
    x1 + w1 / 2 + margin < x2 - w2 / 2 ||
    x1 - w1 / 2 - margin > x2 + w2 / 2 ||
    y1 + h1 / 2 + margin < y2 - h2 / 2 ||
    y1 - h1 / 2 - margin > y2 + h2 / 2
  );
}

export function getAngleFromCenter(x, y, containerRef) {
  if (!containerRef.current) return 0;
  const rect = containerRef.current.getBoundingClientRect();
  const cx = rect.left + rect.width / 2;
  const cy = rect.top + rect.height / 2;
  const dx = x - cx;  
  const dy = y - cy;
  let angle = Math.atan2(dy, dx) * (180 / Math.PI);
  if (angle < 0) angle += 360;
  return angle;
}

export function limitPositionInsideCircle(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  // Usar la misma l칩gica que limitPositionInsideCircleSimple para consistencia
  return limitPositionInsideCircleSimple(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen);
}

// Funci칩n m치s precisa para limitar la posici칩n dentro del c칤rculo
export function limitPositionInsideCirclePrecise(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  if (isSmallScreen) {
    return limitPositionInsideScreen(newX, newY, w, h);
  }

  const { cx, cy } = circleCenter;
  const halfWidth = w / 2;
  const halfHeight = h / 2;
  
  // Verificar si la nueva posici칩n est치 completamente dentro del c칤rculo
  if (isItemInsideCircle(newX, newY, w, h, circleCenter, maxRadius)) {
    return { x: newX, y: newY };
  }
  
  // Si no est치 dentro, usar un enfoque m치s suave y gradual
  const dx = newX - cx;
  const dy = newY - cy;
  const distanceCenter = Math.sqrt(dx * dx + dy * dy);
  
  // Calcular la distancia m치xima permitida para que el item est칠 completamente dentro
  const itemCornerDistance = Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight);
  const maxDistance = maxRadius - itemCornerDistance;
  
  // Si est치 muy fuera del l칤mite, usar la funci칩n original m치s suave
  if (distanceCenter > maxDistance + 50) {
    const angle = Math.atan2(dy, dx);
    const limitedX = cx + maxDistance * Math.cos(angle);
    const limitedY = cy + maxDistance * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  }
  
  // Si est치 cerca del l칤mite, hacer una correcci칩n m치s suave
  // Encontrar la posici칩n m치s cercana que est칠 dentro
  let bestX = newX;
  let bestY = newY;
  let bestDistance = Infinity;
  
  // Probar con menos precisi칩n para movimientos m치s suaves
  for (let angle = 0; angle < 360; angle += 15) { // 15 grados en lugar de 5
    const rad = (angle * Math.PI) / 180;
    
    // Probar con menos precisi칩n para movimientos m치s suaves
    for (let distance = maxDistance - 20; distance <= maxDistance; distance += 10) { // Solo cerca del l칤mite
      const testX = cx + distance * Math.cos(rad);
      const testY = cy + distance * Math.sin(rad);
      
      if (isItemInsideCircle(testX, testY, w, h, circleCenter, maxRadius)) {
        const distToOriginal = Math.sqrt((testX - newX) ** 2 + (testY - newY) ** 2);
        if (distToOriginal < bestDistance) {
          bestDistance = distToOriginal;
          bestX = testX;
          bestY = testY;
        }
      }
    }
  }
  
  return { x: bestX, y: bestY };
}

// Funci칩n h칤brida que combina suavidad y precisi칩n
export function limitPositionInsideCircleSmooth(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  if (isSmallScreen) {
    return limitPositionInsideScreen(newX, newY, w, h);
  }

  const { cx, cy } = circleCenter;
  const dx = newX - cx;
  const dy = newY - cy;
  const distanceCenter = Math.sqrt(dx * dx + dy * dy);
  
  // Calcular la distancia m치xima permitida
  const halfWidth = w / 2;
  const halfHeight = h / 2;
  const itemCornerDistance = Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight);
  const maxDistance = maxRadius - itemCornerDistance;
  
  // Si est치 dentro del l칤mite, permitir el movimiento
  if (distanceCenter <= maxDistance) {
    return { x: newX, y: newY };
  }
  
  // Si est치 fuera, hacer una correcci칩n suave pero precisa
  const angle = Math.atan2(dy, dx);
  
  // Zona de amortiguaci칩n m치s peque침a para mejor precisi칩n
  const bufferZone = 15; // Reducir de 30 a 15px
  const overLimit = distanceCenter - maxDistance;
  
  if (overLimit <= bufferZone) {
    // En la zona de amortiguaci칩n, hacer correcci칩n m치s precisa
    const correctionFactor = overLimit / bufferZone; // 0 a 1
    // Usar una correcci칩n m치s directa para llegar al l칤mite
    const correctedDistance = maxDistance + (overLimit * correctionFactor * 0.1); // Reducir m치s la correcci칩n
    
    const limitedX = cx + correctedDistance * Math.cos(angle);
    const limitedY = cy + correctedDistance * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  } else {
    // Fuera de la zona de amortiguaci칩n, usar l칤mite estricto
    const limitedX = cx + maxDistance * Math.cos(angle);
    const limitedY = cy + maxDistance * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  }
}

// Funci칩n para validar que un item est칠 completamente dentro del c칤rculo
export function isItemInsideCircle(x, y, w, h, circleCenter, maxRadius) {
  const { cx, cy } = circleCenter;
  const halfWidth = w / 2;
  const halfHeight = h / 2;
  
  // Verificar que todas las esquinas del item est칠n dentro del c칤rculo
  const corners = [
    { x: x - halfWidth, y: y - halfHeight }, // Esquina superior izquierda
    { x: x + halfWidth, y: y - halfHeight }, // Esquina superior derecha
    { x: x - halfWidth, y: y + halfHeight }, // Esquina inferior izquierda
    { x: x + halfWidth, y: y + halfHeight }  // Esquina inferior derecha
  ];
  
  for (const corner of corners) {
    const dx = corner.x - cx;
    const dy = corner.y - cy;
    const distance = Math.sqrt(dx * dx + dy * dy);
    if (distance > maxRadius) {
      return false;
    }
  }
  
  return true;
}

// Funci칩n balanceada que prioriza la precisi칩n pero mantiene algo de suavidad
export function limitPositionInsideCircleBalanced(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  if (isSmallScreen) {
    return limitPositionInsideScreen(newX, newY, w, h);
  }

  const { cx, cy } = circleCenter;
  const dx = newX - cx;
  const dy = newY - cy;
  const distanceCenter = Math.sqrt(dx * dx + dy * dy);
  
  // Calcular la distancia m치xima permitida
  const halfWidth = w / 2;
  const halfHeight = h / 2;
  const itemCornerDistance = Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight);
  const maxDistance = maxRadius - itemCornerDistance;
  
  // Si est치 dentro del l칤mite, permitir el movimiento
  if (distanceCenter <= maxDistance) {
    return { x: newX, y: newY };
  }
  
  // Si est치 fuera, usar la funci칩n original m치s directa pero con peque침a amortiguaci칩n
  const angle = Math.atan2(dy, dx);
  
  // Zona de amortiguaci칩n muy peque침a para m치xima precisi칩n
  const bufferZone = 8; // Solo 8px de amortiguaci칩n
  const overLimit = distanceCenter - maxDistance;
  
  if (overLimit <= bufferZone) {
    // En la zona de amortiguaci칩n, hacer correcci칩n m칤nima
    const correctionFactor = overLimit / bufferZone;
    const correctedDistance = maxDistance + (overLimit * correctionFactor * 0.05); // Correcci칩n muy peque침a
    
    const limitedX = cx + correctedDistance * Math.cos(angle);
    const limitedY = cy + correctedDistance * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  } else {
    // Fuera de la zona de amortiguaci칩n, usar l칤mite estricto
    const limitedX = cx + maxDistance * Math.cos(angle);
    const limitedY = cy + maxDistance * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  }
}

// Funci칩n espec칤fica para manejar mejor los 90 grados
export function limitPositionInsideCircle90Degrees(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  if (isSmallScreen) {
    return limitPositionInsideScreen(newX, newY, w, h);
  }

  const { cx, cy } = circleCenter;
  const dx = newX - cx;
  const dy = newY - cy;
  const distanceCenter = Math.sqrt(dx * dx + dy * dy);
  
  // Calcular la distancia m치xima permitida
  const halfWidth = w / 2;
  const halfHeight = h / 2;
  
  // Para los 90 grados, usar un c치lculo m치s preciso
  const angle = Math.atan2(dy, dx) * (180 / Math.PI);
  const normalizedAngle = ((angle + 360) % 360);
  
  // Detectar si est치 cerca de los 90 grados (0춿, 90춿, 180춿, 270춿)
  const isNear90Degrees = 
    (normalizedAngle >= 85 && normalizedAngle <= 95) ||    // 90춿
    (normalizedAngle >= 175 && normalizedAngle <= 185) ||  // 180춿
    (normalizedAngle >= 265 && normalizedAngle <= 275) ||  // 270춿
    (normalizedAngle >= 355 || normalizedAngle <= 5);      // 0춿/360춿
  
  if (isNear90Degrees) {
    // En los 90 grados, usar l칤mites m치s precisos
    let maxDistance;
    
    if (normalizedAngle >= 85 && normalizedAngle <= 95) {
      // Arriba (90춿) - considerar solo la altura
      maxDistance = maxRadius - halfHeight;
    } else if (normalizedAngle >= 175 && normalizedAngle <= 185) {
      // Izquierda (180춿) - considerar solo el ancho
      maxDistance = maxRadius - halfWidth;
    } else if (normalizedAngle >= 265 && normalizedAngle <= 275) {
      // Abajo (270춿) - considerar solo la altura
      maxDistance = maxRadius - halfHeight;
    } else {
      // Derecha (0춿/360춿) - considerar solo el ancho
      maxDistance = maxRadius - halfWidth;
    }
    
    // Debug para los 90 grados
    if (process.env.NODE_ENV === 'development') {
      console.log('游꿢 90 grados detectado:', {
        angle: normalizedAngle,
        direction: normalizedAngle >= 85 && normalizedAngle <= 95 ? 'arriba' : 
                  normalizedAngle >= 175 && normalizedAngle <= 185 ? 'izquierda' :
                  normalizedAngle >= 265 && normalizedAngle <= 275 ? 'abajo' : 'derecha',
        maxRadius,
        halfWidth,
        halfHeight,
        maxDistance,
        distanceCenter,
        willLimit: distanceCenter > maxDistance
      });
    }
    
    if (distanceCenter <= maxDistance) {
      return { x: newX, y: newY };
    }
    
    // Aplicar l칤mite estricto para los 90 grados
    const rad = (normalizedAngle * Math.PI) / 180;
    const limitedX = cx + maxDistance * Math.cos(rad);
    const limitedY = cy + maxDistance * Math.sin(rad);
    
    if (process.env.NODE_ENV === 'development') {
      console.log('游늸 90 grados limitado:', { 
        from: { x: newX, y: newY }, 
        to: { x: limitedX, y: limitedY } 
      });
    }
    
    return { x: limitedX, y: limitedY };
  }
  
  // Para otras posiciones, usar la funci칩n balanceada
  return limitPositionInsideCircleBalanced(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen);
}

// Funci칩n para limitar posici칩n dentro de los l칤mites de la pantalla (mobile)
export function limitPositionInsideScreen(newX, newY, w, h) {
  const halfWidth = w / 2;
  const halfHeight = h / 2;

  // Obtener dimensiones de la pantalla
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;

  // M치rgenes asim칠tricos: menos margen arriba/izquierda para permitir acceso a la basura
  // La basura est치 en top:5, left:25, con zona de ~100x100px
  const marginLeft = 0;   // Sin margen izquierdo para llegar a la basura
  const marginTop = 0;    // Sin margen superior para llegar a la basura
  const marginRight = 8;  // Margen normal en el lado derecho
  const marginBottom = 8; // Margen normal en el lado inferior

  // Calcular l칤mites con m치rgenes asim칠tricos
  const minX = halfWidth + marginLeft;
  const maxX = screenWidth - halfWidth - marginRight;
  const minY = halfHeight + marginTop;
  const maxY = screenHeight - halfHeight - marginBottom;

  // Limitar la posici칩n dentro de los bordes de la pantalla
  const limitedX = Math.max(minX, Math.min(maxX, newX));
  const limitedY = Math.max(minY, Math.min(maxY, newY));

  return { x: limitedX, y: limitedY };
}

// Funci칩n para calcular la m치xima distancia que puede estar el centro del item
// del centro del c칤rculo, asegurando que todas las esquinas est칠n dentro
function calculateMaxDistanceForAngle(angle, halfWidth, halfHeight, maxRadius) {
  // Convertir 치ngulo a radianes
  const angleRad = (angle * Math.PI) / 180;

  // Calcular las 4 esquinas del rect치ngulo relativas al centro del item
  const corners = [
    { x: -halfWidth, y: -halfHeight }, // Superior izquierda
    { x: halfWidth, y: -halfHeight },  // Superior derecha
    { x: -halfWidth, y: halfHeight },  // Inferior izquierda
    { x: halfWidth, y: halfHeight }    // Inferior derecha
  ];

  // Para cada esquina, calcular qu칠 tan lejos puede estar el centro del item
  // de modo que esa esquina espec칤fica est칠 justo en el borde del c칤rculo
  let minMaxDistance = maxRadius;

  for (const corner of corners) {
    // Rotar la esquina seg칰n el 치ngulo del item (si estuviera rotado)
    // En este caso no hay rotaci칩n del item, as칤 que las esquinas est치n alineadas

    // Distancia de esta esquina al centro del item
    const cornerDist = Math.sqrt(corner.x * corner.x + corner.y * corner.y);

    // 츼ngulo de esta esquina relativa al centro del item
    const cornerAngle = Math.atan2(corner.y, corner.x);

    // 츼ngulo absoluto de esta esquina cuando el item est치 en 'angle'
    const absoluteCornerAngle = angleRad + cornerAngle;

    // Posici칩n de esta esquina si el centro del item est치 a distancia 'd' del centro del c칤rculo
    // corner_x = d * cos(angleRad) + corner.x
    // corner_y = d * sin(angleRad) + corner.y
    // Queremos: corner_x^2 + corner_y^2 <= maxRadius^2

    // Simplificando: queremos encontrar la m치xima distancia 'd' tal que
    // (d * cos(angleRad) + corner.x)^2 + (d * sin(angleRad) + corner.y)^2 = maxRadius^2

    const cosA = Math.cos(angleRad);
    const sinA = Math.sin(angleRad);

    // Expandiendo: d^2 + 2*d*(corner.x*cosA + corner.y*sinA) + (corner.x^2 + corner.y^2) = maxRadius^2
    // d^2 + 2*d*b + c - maxRadius^2 = 0
    const b = corner.x * cosA + corner.y * sinA;
    const c = corner.x * corner.x + corner.y * corner.y;

    // Resolver ecuaci칩n cuadr치tica: d^2 + 2*b*d + (c - maxRadius^2) = 0
    const discriminant = 4 * b * b - 4 * (c - maxRadius * maxRadius);

    if (discriminant >= 0) {
      const d = (-2 * b + Math.sqrt(discriminant)) / 2;
      minMaxDistance = Math.min(minMaxDistance, d);
    }
  }

  return minMaxDistance;
}

// Funci칩n simple y directa que verifica que todas las esquinas est칠n dentro del c칤rculo
export function limitPositionInsideCircleSimple(newX, newY, w, h, circleCenter, maxRadius, isSmallScreen = false) {
  if (isSmallScreen) {
    return limitPositionInsideScreen(newX, newY, w, h);
  }

  const { cx, cy } = circleCenter;
  const halfWidth = w / 2;
  const halfHeight = h / 2;

  // Verificar si todas las esquinas est치n dentro del c칤rculo
  if (isItemInsideCircle(newX, newY, w, h, circleCenter, maxRadius)) {
    return { x: newX, y: newY };
  }

  // Si no est치 dentro, proyectar la posici칩n deseada hacia el l칤mite v치lido
  // Buscar la posici칩n m치s cercana en la direcci칩n del movimiento
  const dx = newX - cx;
  const dy = newY - cy;
  const angle = Math.atan2(dy, dx);

  // Calcular las 4 esquinas en la nueva posici칩n
  const corners = [
    { x: newX - halfWidth, y: newY - halfHeight },
    { x: newX + halfWidth, y: newY - halfHeight },
    { x: newX - halfWidth, y: newY + halfHeight },
    { x: newX + halfWidth, y: newY + halfHeight }
  ];

  // Encontrar cu치nto excede cada esquina del l칤mite
  let maxExcess = 0;
  for (const corner of corners) {
    const cornerDx = corner.x - cx;
    const cornerDy = corner.y - cy;
    const cornerDist = Math.sqrt(cornerDx * cornerDx + cornerDy * cornerDy);
    const excess = cornerDist - maxRadius;
    if (excess > maxExcess) {
      maxExcess = excess;
    }
  }

  // Si hay exceso, mover el item hacia el centro para compensar
  if (maxExcess > 0) {
    const currentDist = Math.sqrt(dx * dx + dy * dy);
    const adjustedDist = currentDist - maxExcess;
    const limitedX = cx + adjustedDist * Math.cos(angle);
    const limitedY = cy + adjustedDist * Math.sin(angle);
    return { x: limitedX, y: limitedY };
  }

  return { x: newX, y: newY };
}
